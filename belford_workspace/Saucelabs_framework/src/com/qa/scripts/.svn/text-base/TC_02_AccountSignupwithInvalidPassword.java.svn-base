///////////////////Script Info //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Script Name:												AccountSignupWithInvalidPassword
//TestCase Summary: 										Verify that new user is unable to signup in application by providing invalid password.
//What the script does/TestCase Description:				Following is what Scripts does
//															1. Calls the Reusable action signup a new user with some invalid password
//															2. After the reusable action it make sure that user does not get signed up.
//What script(s) should be run before this script:			N/A
//What script(s) should be run after this script:			N/A
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.qa.scripts;

import org.testng.annotations.*;
import org.testng.Assert;
import com.qa.Functions.common.CommonUtils;
import com.qa.Functions.webdriver.UIEvents;
import com.qa.ReusableActions.ReusableActions;

public class TC_02_AccountSignupwithInvalidPassword extends SetupScript {
	//This is the test cases to ensure that the user is able to signup with invalid password
	@Test(description="TC_02_Verify that new user is unable to signup in application by providing invalid password.", groups="SmokeTest")	
		public void accountSignupwithInvalidPassword() throws Exception {
		String str_EmailAddress;
		str_EmailAddress=CommonUtils.readIni("TestData.ini", "Email_User")+"_"+CommonUtils.readIni("Environment.ini","Build_Number")+"@"+CommonUtils.readIni("TestData.ini", "Email_Domain");
		
		//System is clicking on Signin/Signup link
		UIEvents.click(driver, CommonUtils.readIni("Repository.ini", "lnk_Login_Singup"));
	
		//This sections calls the reusable action to signup application with the provided email, invalid password and city.
		ReusableActions.accountSignup(driver, str_EmailAddress, CommonUtils.readIni("TestData.ini", "InvalidPassword"), CommonUtils.readIni("TestData.ini", "CITY"));
		
		//System is waiting for seconds specified
		CommonUtils.waitForChangesToReflect(CommonUtils.toInt(CommonUtils.readIni("Environment.ini", "INTERVAL")));

		//System is ensuring that user does not get signed up with invalid Password
		Assert.assertNotNull(UIEvents.waitForElement(driver, CommonUtils.readIni("Repository.ini", "InvalidPasswordMessage")));
		
	}		
		
}